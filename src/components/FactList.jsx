// On importe React et deux fonctions utiles : useState (pour gÃ©rer les donnÃ©es qui changent)
// et useEffect (pour faire une action quand le composant est affichÃ©)
import React, { useEffect, useState } from "react";

// On importe Link pour pouvoir crÃ©er des liens vers d'autres pages sans recharger le site
import { Link } from "react-router-dom";

// On dÃ©finit l'adresse de base de notre API locale
const API = "http://localhost:8000/api";

// DÃ©but du composant principal qui affiche la liste des "facts"
function FactList() {
  // facts = liste des donnÃ©es, setFacts = fonction pour la modifier
  const [facts, setFacts] = useState([]);

  // loading = indique si on est encore en train de charger les donnÃ©es
  const [loading, setLoading] = useState(true);

  // errorMsg = message dâ€™erreur Ã  afficher si quelque chose ne va pas
  const [errorMsg, setErrorMsg] = useState("");

  // useEffect sâ€™exÃ©cute automatiquement au dÃ©marrage du composant
  useEffect(function () {
    // On crÃ©e une fonction asynchrone qui va charger les donnÃ©es depuis lâ€™API
    async function load() {
      try {
        // On envoie une requÃªte GET Ã  lâ€™API pour rÃ©cupÃ©rer la liste des facts
        const res = await fetch(`${API}/facts`, {
          headers: { Accept: "application/json" },
        });

        // Si la rÃ©ponse du serveur nâ€™est pas "OK" (ex: erreur 404, 500â€¦)
        if (!res.ok) {
          // On enregistre un message dâ€™erreur avec le code HTTP
          setErrorMsg(`Erreur API ${res.status}`);
          // On indique que le chargement est terminÃ©
          setLoading(false);
          // On arrÃªte ici la fonction
          return;
        }

        // On transforme la rÃ©ponse (texte) en objet JSON
        const data = await res.json();

        // Si lâ€™API renvoie les donnÃ©es dans "hydra:member", on les prend lÃ -dedans
        // Sinon, on prend directement "data"
        const rows = data["hydra:member"] ?? data;

        // On stocke les donnÃ©es dans la variable dâ€™Ã©tat "facts"
        setFacts(rows);
      } catch (e) {
        // Si une erreur arrive (par ex. pas de connexion au serveur)
        setErrorMsg("Erreur de connexion Ã  lâ€™API");
      } finally {
        // Dans tous les cas (succÃ¨s ou erreur), on arrÃªte lâ€™Ã©tat de chargement
        setLoading(false);
      }
    }

    // On appelle la fonction pour lancer le chargement dÃ¨s le montage du composant
    load();
  }, []); // Le tableau vide [] veut dire quâ€™on ne relance pas useEffect ensuite

  // Fonction pour supprimer un "fact" (appelÃ©e quand on clique sur le bouton Supprimer)
  async function handleDelete(id) {
    // On demande confirmation Ã  lâ€™utilisateur avant de supprimer
    if (!window.confirm("Supprimer ce fact ?")) return;

    // Si lâ€™utilisateur confirme, on envoie une requÃªte DELETE Ã  lâ€™API
    await fetch(`${API}/facts/${id}`, {
      method: "DELETE",
      headers: { Accept: "application/json" },
    });

    // On met Ã  jour la liste des facts cÃ´tÃ© interface en enlevant celui supprimÃ©
    setFacts((prev) => prev.filter((f) => f.id !== id));
  }

  // Si le chargement est en cours, on affiche un message "Chargementâ€¦"
  if (loading) return <p>Chargementâ€¦</p>;

  // Si une erreur est survenue, on affiche le message dâ€™erreur
  if (errorMsg) return <p>{errorMsg}</p>;

  // Si tout va bien, on affiche la liste des facts
  return (
    <div className="card">
      <h2>Liste des facts</h2>

      {/* Si la liste est vide, on affiche un message "Aucun fact trouvÃ©" */}
      {facts.length === 0 ? (
        <p>Aucun fact trouvÃ©.</p>
      ) : (
        // Sinon, on affiche la liste complÃ¨te des facts
        <ul className="list">
          {/* On parcourt tous les facts et on crÃ©e un Ã©lÃ©ment <li> pour chacun */}
          {facts.map((f) => (
            <li key={f.id} className="item">
              <div>
                {/* On affiche le nom de la techno en gras */}
                <strong>{f.techno}</strong>

                {/* On affiche le texte du fact */}
                <p>{f.fact}</p>

                {/* Si la date existe, on lâ€™affiche joliment au format franÃ§ais */}
                {f.date_enregistrement && (
                  <small>
                    ðŸ•“ {new Date(f.date_enregistrement).toLocaleString("fr-FR")}
                  </small>
                )}
              </div>

              {/* Zone des actions (boutons Modifier et Supprimer) */}
              <div className="actions">
                {/* Lien pour aller voir le dÃ©tail du fact (page individuelle) */}
                <Link className="btn view" to={`/fact/${f.id}`}>
                  Voir
                </Link>

                {/* Lien pour aller sur la page dâ€™Ã©dition du fact (modifier les infos) */}
                <Link className="btn" to={`/edit/${f.id}`}>
                  Modifier
                </Link>

                {/* Bouton pour supprimer le fact */}
                <button
                  className="btn danger"
                  onClick={() => handleDelete(f.id)} // quand on clique, on appelle la fonction handleDelete avec lâ€™id du fact
                >
                  Supprimer
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

// On exporte le composant pour pouvoir lâ€™utiliser ailleurs dans le projet
export default FactList;
